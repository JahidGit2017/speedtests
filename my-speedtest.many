#!/usr/bin/perl -w
#
# Generate the a data-set of internet speeds.
#
# Output is in tsv format, with headers:
#
#   DateTime  Ping  Up  Down  Provider
#
# How:
#   - Runs Ubuntu command-line 'speedtest' on the closest N speedtest providers
#   - Does some minor filtering of a few providers that have issues.
#   - Pretty-prints the results in compact TSV format
#
# To install the prerequisite command-line speedtest on Ubuntu, use:
#   sudo apt-get install speedtest-cli
#
# To read the docs after installation:
#   man speedtest
#
my $TopN = 20;
my @ServerIds = ();
my %Id2Provider = ();

#
# Ignore some inconsistent, unreliable (e.g. causing errors) outliers
#
my @UnreliableServers = qw(
    T-Mobile
    SRCC-Networking
    CodecCloudLimited
    Jefferson.Union
);
my $UnreliableServers = sprintf('(%s)', join('|', @UnreliableServers));

sub closest_n_servers($) {
    my $n = shift;
    my @server_ids = ();

    my $good_count = 0;
    open(my $inp, "speedtest --list |");
    while (my $line = <$inp>) {
        next if ($line =~ /$UnreliableServers/o);

        if ($line =~ /^\s*(\d+)\)\s*(.*?) \[([0-9.]+) km/) {
            my ($server_id, $provider, $distance) = ($1, $2, $3);
            $provider =~ s/\s*\([^)]+\)\s*//g;

            push(@server_ids, $server_id);
            $Id2Provider{$server_id} = $provider;
            $Id2Distance{$server_id} = $distance;

            $good_count++;
            # printf STDERR "%s\t%s\t%s km\n", $server_id, $provider, $distance;
        }
        last if ($good_count >= $n);
    }
    close $inp;
    @server_ids;
}

sub ymd_hm() {
    my $ymd_hm = qx{date '+%Y-%m-%d-%H:%M'};
    chomp($ymd_hm);
    $ymd_hm;
}

sub ping_up_down($) {
    my $server_id = shift;
    my $ouptut = qx{speedtest --server $server_id --simple};
    my ($ping_time)     = ($ouptut =~ /Ping:\s*([0-9.]+)/);
    my ($up_speed)      = ($ouptut =~ /Upload:\s*([0-9.]+)/);
    my ($down_speed)    = ($ouptut =~ /Download:\s*([0-9.]+)/);

    ($ping_time, $up_speed, $down_speed);
}

sub speed_test($) {
    my $server_id = shift;

    my $ymd_hm = ymd_hm();
    my ($ping, $up_speed, $down_speed) = ping_up_down($server_id);
    printf "%s\t%.02f\t%.02f\t%.02f\t%s\n",
            $ymd_hm, $ping, $up_speed, $down_speed,
            "$Id2Provider{$server_id} ($Id2Distance{$server_id} km)"
}


#
# -- main
#
@ServerIds = closest_n_servers($TopN);

for my $server_id (@ServerIds) {
    speed_test($server_id);
}

